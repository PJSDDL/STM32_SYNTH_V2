#include "MIDI.H"

//每三个数代表一个事件，三个数的含义依次是音调、时间、力度
const unsigned int MIDI_1[192] = {
57,1,100,0,199,64,69,201,100,0,399,64,67,401,100,0,599,64,64,601,100,0,799,64,62,
801,100,0,999,64,64,1001,100,0,1099,64,62,1101,100,0,1199,64,60,1201,100,0,1399,64,62,1401,
100,0,1599,64,60,1601,100,0,1799,64,59,1801,100,0,1999,64,57,2001,100,0,2199,64,55,2201,100,
0,2399,64,52,2401,100,0,2599,64,55,2601,100,0,2799,64,50,2801,100,0,3199,64,57,3201,100,0,
3399,64,69,3401,100,0,3599,64,67,3601,100,0,3799,64,64,3801,100,0,3999,64,62,4001,100,0,4199,
64,64,4201,100,0,4299,64,62,4301,100,0,4399,64,60,4401,100,0,4599,64,62,4601,100,0,4799,64,
60,4801,100,0,4999,64,59,5001,100,0,5199,64,57,5201,100,0,5399,64,55,5401,100,0,5599,64,52,
5601,100,0,5799,64,55,5801,100,0,5999,64,57,6001,100,0,6399,64,
};

const unsigned int MIDI_2[132] = {
40,1,100,0,199,64,40,400,100,0,599,64,40,800,100,0,999,64,40,1100,100,0,1299,64,40,
1400,100,0,1599,64,40,1800,100,0,1999,64,40,2001,100,0,2199,64,40,2400,100,0,2599,64,40,2700,
100,0,2899,64,40,3000,100,0,3099,64,40,3101,100,0,3199,64,40,3201,100,0,3399,64,40,3600,100,
0,3799,64,40,4000,100,0,4199,64,40,4300,100,0,4499,64,40,4600,100,0,4799,64,40,5000,100,0,
5199,64,40,5201,100,0,5399,64,40,5600,100,0,5799,64,40,5900,100,0,6099,64,40,6200,100,0,6299,
64,40,6301,100,0,6399,64,
};

const unsigned int MIDI_3[54] = {
48,1,100,0,799,64,47,801,100,0,1599,64,45,1601,100,0,2399,64,43,2401,100,0,2799,64,45,
2801,100,0,3199,64,48,3201,100,0,3999,64,47,4001,100,0,4799,64,43,4801,100,0,5599,64,45,5601,
100,0,6399,64,
};

//C2到C7
unsigned int Note_Freq[72] = {
    65, 69, 73, 78, 82, 87, 92, 98, 104, 110, 117, 123,
    130, 139, 147, 156, 165, 175, 185, 196, 208, 220, 233, 246,
    262, 277, 294, 311, 330, 349, 370, 392, 415, 440, 466, 493,
    523, 554, 587, 622, 659, 698, 740, 784, 831, 880, 932, 988,
    1046, 1109, 1175, 1245, 1319, 1396, 1480, 1568, 1661, 1760, 1865, 1976,
    2092, 2218, 2350, 2490, 2638, 2792, 2960, 3136, 3322, 3520, 3730, 3952,
};

void MIDI_Control(struct MIDI_CTRL *ctrl, const u32 MIDI_list[], u32 len, u8 *trig)
{
    if (ctrl->clk_div <= 18)
    {
        ctrl->clk_div ++;
    }
    else
    {
        ctrl->clk_div = 0;
        ctrl->mid_cnt ++;
    }

    //判断是否需要读取下一个音符
    if (MIDI_list[ctrl->mid_index + 1] == ctrl->mid_cnt)
    {
        //音调为0关闭音符
        if (MIDI_list[ctrl->mid_index + 0] == 0)
        {
            *trig = 0;
            ctrl->mid_freq = 0;
        }
        else
        {
            *trig = 1;
            u8 note_num = MIDI_list[ctrl->mid_index + 0];
            //ctrl->mid_note = Note_Freq[note_num-48];
            ctrl->mid_freq = Note_Freq[note_num + ctrl->note_shift];
        }

        ctrl->mid_vec = MIDI_list[ctrl->mid_index + 2];

        ctrl->mid_index += 3;
    }
}

void MIDI_CTRL_INIT(struct MIDI_CTRL ctrl[], u32 len)
{
    for (u8 index = 0; index < len; index++)
    {
        ctrl[0].clk_div = 0;
        ctrl[0].mid_cnt = (u32)-1;
        ctrl[0].mid_index = 0;
    }
}
